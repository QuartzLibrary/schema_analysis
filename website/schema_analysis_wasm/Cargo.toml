[package]
name = "schema_analysis_wasm"
version = "0.2.2"
authors = ["QuartzLibrary"]
edition = "2018"
publish = false

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
js-sys = "0.3"
web-sys = { version = "0.3", features = [ "console" ] }
wasm-bindgen = "0.2"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

once_cell = "1"

serde = "1.0"
serde_json = "1.0"
serde_yaml = "0.9"
serde_cbor = "0.11"
toml = "0.5"
bson = "2.0"
quick-xml = { version = "0.26", features = ["serialize"] }

# Enable the "js" feature in transitive dependency via `bson`.
getrandom = { version = "0.2", features = ["js"] }

[dependencies.schema_analysis]
path = "../../schema_analysis"
features = [ "json_typegen", "schemars_integration" ]

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
